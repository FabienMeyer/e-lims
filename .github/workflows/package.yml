name: Package
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/fabienmeyer/e-lims:latest
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}
    steps:


      - name: Checkout code
        uses: actions/checkout@v3

      - name: Poetry configure and install
        run: |
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.create true
          poetry env use /root/.pyenv/versions/3.10.13/bin/python
          poetry install
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Build Custom Docker Image
        run: |
            docker build -t e-lims:latest -f Dockerfile .
            docker push ghcr.io/fabienmeyer/e-lims:latest

  linters:
    runs-on: ubuntu-latest
    needs: [build]
    container:
      image: ghcr.io/fabienmeyer/e-lims:latest
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Black
        run: | 
          poetry run black elims/ tests/
      
      - name: Run Ruff
        run: |
          ls -la
          poetry run ruff elims/ tests/

      - name: Run Mypy
        run: |
          poetry run mypy elims/ tests/


      

  # tests:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ghcr.io/fabienmeyer/e-lims:latest
  #     credentials:
  #        username: ${{ github.actor }}
  #        password: ${{ secrets.GITHUB_TOKEN }}
  #   strategy:
  #     matrix:
  #       python-version: ["3.10.13", "3.11.5"]

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Poetry configure and install
  #       run: |
  #         poetry config virtualenvs.in-project true
  #         poetry config virtualenvs.create true
  #         poetry env use /root/.pyenv/versions/${{ matrix.python-version }}/bin/python
  #         poetry install

  #     - name: Run Pytest
  #       run: |
  #         poetry run pytest --cov=tests .
  #         poetry run coverage xml  

  #     - name: Poetry build
  #       run: |
  #         poetry build

  # documentation:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ghcr.io/fabienmeyer/e-lims:latest
  #     credentials:
  #        username: ${{ github.actor }}
  #        password: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Poetry configure and install
  #       run: |
  #         poetry config virtualenvs.in-project true
  #         poetry config virtualenvs.create true
  #         poetry env use /root/.pyenv/versions/3.10.13/bin/python
  #         poetry install
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Poetry configure and install
  #       run: |
  #         poetry config virtualenvs.in-project true
  #         poetry config virtualenvs.create true
  #         poetry env use /root/.pyenv/versions/3.10.13/bin/python
  #         poetry install

  #     - name: Run Sphinx
  #       run: | 
  #         poetry run sphinx-build -E -W -c docs/source -b html docs/source docs/build/html

  # pages:
  #   runs-on: ubuntu-latest
  #   needs: [documentation, linters, tests]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Deploy documentation
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: ./docs/build/html

  # pypi-offical:
  #   needs: [documentation, linters, tests]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Poetry configure and install
  #       run: |
  #         poetry config virtualenvs.in-project true
  #         poetry config virtualenvs.create true
  #         poetry env use /root/.pyenv/versions/3.10.13/bin/python
  #         poetry install

  #     - name: Poetry build
  #       run: poetry build

      # - name: Poetry publish
      #   run: poetry publish
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}