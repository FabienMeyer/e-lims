name: Releases

# on:
#   push:
#     tags:
#       - '*.*.*'

on:
  pull_request: {}
  push:
    branches:
      - main
    
jobs:
  build:
    name: Build - ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: "${{ matrix.os }}-latest"
    strategy:
      matrix:
        os: [Ubuntu, MacOS, Windows]
        python-version: ["3.10", "3.11", "3.12-dev"]
        include:
          - os: Ubuntu
            python-version: 3.10
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'Windows' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Check lock file
        run: poetry check --lock

      - name: Poetry build
        run: poetry build

      # - name: Build and publish package
      #   if: ${{ matrix.os == 'Windows' }} and ${{ matrix.python-version == '3.10' }}
      #   env:
      #     PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #     PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      #   run: |
      #     poetry config pypi-token.pypi $PYPI_USERNAME $PYPI_PASSWORD
      #     poetry publish --build -n

  documentation:
    name: Tests - ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: "${{ matrix.os }}-latest"
    strategy:
      matrix:
        os: [Ubuntu, MacOS, Windows]
        python-version: ["3.10", "3.11", "3.12-dev"]
        include:
          - os: Ubuntu
            python-version: 3.10
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'Windows' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Check lock file
        run: poetry check --lock

      - name: Run Sphinx
        run: | 
          poetry run sphinx-build -E -W -c docs/source -b html docs/source docs/build/html

      - name: Upload artifact
        if: ${{ matrix.os == 'Windows' }} and ${{ matrix.python-version == '3.10' }}
        uses: actions/upload-pages-artifact@v1
        with:
          path: 'docs/build/html'

  
      # - name: Deploy to GitHub Pages
      #   if: ${{ matrix.os == 'Windows' }} and ${{ matrix.python-version == '3.10' }}
      #   id: deployment
      #   uses: actions/deploy-pages@v1